<?php


namespace Tests\Feature\API\Advert;


use App\Http\Resources\AdvertResource;
use App\Models\Advert;
use App\Models\User;
use Tests\TestCase;

class LoadAdvertTest extends TestCase
{
    protected User $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::find(1);
    }

    public function testGuestCannotLoadAdvert()
    {
        $this->getJson(route('api.advert.get', ['advert' => 1]))
            ->assertStatus(401);
    }

    public function testCannotLoadNonExistentAdvert()
    {
        $this->actingAs($this->user)
            ->getJson(route('api.advert.get', ['advert' => 30]))
            ->assertStatus(404);
    }

    public function testUserCanLoadAdvert()
    {
        $advert = Advert::find(1)->select(Advert::$defaultFields)->first();
        $advert = new AdvertResource( $advert );

        $this->actingAs($this->user)
            ->getJson(route('api.advert.get', ['advert' => 1]))
            ->assertStatus(200)
            ->assertJson($advert->response()->getData(true))
            ->assertJsonStructure([
                'data' => [
                    'id',
                    'title',
                    'image',
                    'price',
                    'created_at'
                ],
            ]);
    }

    public function testCannotLoadNonExistentFields()
    {
        $this->actingAs($this->user)
            ->getJson(route('api.advert.get', ['advert' => 1, 'fields' => [ 'deleted_at', 'images_links', 'description']]))
            ->assertStatus(422);
    }

    public function testUserCanLoadAdvertWithAdditionalFields()
    {
        $fields = array_merge(Advert::$defaultFields, ['images_links', 'description']);
        $advert = Advert::find(1)->select($fields)->first();
        $advert = new AdvertResource( $advert );

        $this->actingAs($this->user)
            ->getJson(route('api.advert.get', ['advert' => 1, 'fields' => [ 'images_links', 'description']]))
            ->assertStatus(200)
            ->assertJson($advert->response()->getData(true))
            ->assertJsonStructure([
                'data' => [
                    'id',
                    'title',
                    'image',
                    'price',
                    'created_at',
                    'images_links',
                    'description'
                ],
            ]);
    }
}
